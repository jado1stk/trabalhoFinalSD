/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalhofinalsd;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import usuarios.Users;

/**
 *
 * @author utfpr
 */
public class telaUsuario extends javax.swing.JFrame {

    /**
     * Creates new form telaUsuario
     */
    public telaUsuario() {
        initComponents();
        setLocationRelativeTo(this);
        initJList();
        //System.out.println(Arrays.toString(new File(Users.getPathAtual()).list()));
    }
    
    public final void initJList()
    {
        refreshJList();
        verificaButton();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        nomeUser = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDir = new javax.swing.JList<String>();
        enterDir = new javax.swing.JButton();
        backDir = new javax.swing.JButton();
        download = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu6.setText("File");
        jMenuBar2.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar2.add(jMenu7);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        nomeUser.setText("<html>Logado como:<b> " + Users.getNome() + "</b></html>");

        listaDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaDirMouseClicked(evt);
            }
        });
        listaDir.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaDirValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaDir);

        enterDir.setText("Entrar na Pasta");
        enterDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterDirActionPerformed(evt);
            }
        });

        backDir.setText("Voltar");
        backDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backDirActionPerformed(evt);
            }
        });

        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        upload.setText("Upload");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        jMenu3.setText("Arquivos");

        jMenuItem1.setText("Novo Diretório");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Editar");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Tipo de Consulta");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nomeUser)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterDir, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterDir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backDir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(download, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        telaLogin tl = new telaLogin();
        tl.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        ImageIcon iconNewDirectory = new ImageIcon(Users.path + "icons/newFolder.png");
        String newFolder = JOptionPane.showInputDialog(this, "Escolha o nome para o novo diretório", "Novo diretório", 1, iconNewDirectory, null, "").toString();
        if(newFolder != null)
        {
            Users.setPathAtual(Users.getPathAtual() + newFolder + "/");
            new File(Users.getPathAtual()).mkdirs();
            refreshJList();
        }
        verificaButton();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void enterDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterDirActionPerformed
        // TODO add your handling code here:
        Users.setPathAtual(Users.getPathAtual() + listaDir.getSelectedValue() + "/");
        refreshJList();
    }//GEN-LAST:event_enterDirActionPerformed

    private void backDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backDirActionPerformed
        // TODO add your handling code here:
            String pwd = new File(Users.getPathAtual()).getName() + "/";
            Users.setPathAtual(Users.getPathAtual().replace(pwd, ""));
            refreshJList();
    }//GEN-LAST:event_backDirActionPerformed

    private void listaDirValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaDirValueChanged
        // TODO add your handling code here:
        verificaButton();
    }//GEN-LAST:event_listaDirValueChanged

    public void verificaButton()
    {
        File f = new File(Users.getPathAtual() + listaDir.getSelectedValue());
        if(listaDir.isSelectionEmpty())
        {
            enterDir.setEnabled(false);
            download.setEnabled(false);
        }
        else if(f.isDirectory())
        {
            enterDir.setEnabled(true);
            download.setEnabled(false);
        }
        else
        {
            download.setEnabled(true);
            enterDir.setEnabled(false);
        }
    }
    
    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        
        JFileChooser to = new JFileChooser();
        to.setFileSelectionMode(JFileChooser.FILES_ONLY);
        to.addChoosableFileFilter(new FileNameExtensionFilter("text", "pdf", "jpg", "png", "gif", "bmp"));
        int result = to.showSaveDialog(this);
        System.out.println("Caminho: " + Users.getPathAtual() + "/" + listaDir.getSelectedValue());
        File from = new File(Users.getPathAtual() + "/" + listaDir.getSelectedValue());/**/
        if (result == 0)
        {
            try {
                copyFile(from, to.getSelectedFile());
                JOptionPane.showMessageDialog(this, "O download do seu arquivo foi realizado com sucesso", "Download comcluido com êxito", 1);
            } catch (IOException ex) {
                Logger.getLogger(telaUsuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_downloadActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        // TODO add your handling code here:
        JFileChooser from = new  JFileChooser();
        from.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = from.showSaveDialog(null);
        File to = new File(Users.getPathAtual() + from.getSelectedFile().getName());
        if(result == 0)
        {
            try {
                copyFile(from.getSelectedFile(), to);
                JOptionPane.showMessageDialog(this, "O upload do seu arquivo foi realizado com sucesso", "Upload comcluido com êxito", 1);
            } catch (IOException ex) {
                Logger.getLogger(telaUsuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        refreshJList();
    }//GEN-LAST:event_uploadActionPerformed

    private void listaDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaDirMouseClicked
        // TODO add your handling code here:
        JList list = (JList)evt.getSource();
        if(evt.getClickCount() >= 2)
        {
            File file = new File(Users.getPathAtual() + listaDir.getSelectedValue());
            if(file.isDirectory())
            {
                Users.setPathAtual(file.getAbsolutePath() + "/");
                refreshJList();
            }
            else if(file.isFile())
            {
                try {
                    if(!Desktop.isDesktopSupported())
                    {
                        System.out.println("Desktop sem suporte");
                    }
                    else
                    {
                        Desktop desktop = Desktop.getDesktop();
                        desktop.open(file);
                    }
                    
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_listaDirMouseClicked

    public static void copyFile(File source, File destination) throws IOException
    {
        if (destination.exists())
            destination.delete();
        
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;

        try {
            sourceChannel = new FileInputStream(source).getChannel();
            destinationChannel = new FileOutputStream(destination).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(),
                    destinationChannel);
        } finally {
            if (sourceChannel != null && sourceChannel.isOpen())
                sourceChannel.close();
            if (destinationChannel != null && destinationChannel.isOpen())
                destinationChannel.close();
       }
    }
    
    public void refreshJList()
    {
        DefaultListModel dlm = new DefaultListModel();
        String[] strings = new File(Users.getPathAtual()).list();
        for(int i = 0; i < strings.length; i++)
        {
            dlm.addElement(strings[i]);
        }
        listaDir.setModel(dlm);
        String pwd = new File(Users.getPathAtual()).getAbsolutePath();
        //System.out.println("PWD: " + pwd + "\nPath: " + Users.getPathAtual());
        if(pwd.equals(Users.path + Users.getNome()))
        {
            backDir.setEnabled(false);
        }
        else
        {
            backDir.setEnabled(true);
        }
        verificaButton();
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backDir;
    private javax.swing.JButton download;
    private javax.swing.JButton enterDir;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaDir;
    private javax.swing.JLabel nomeUser;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
}
